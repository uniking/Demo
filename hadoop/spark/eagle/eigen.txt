/home/sxis/workspace/incubator-eagle/eagle-security/eagle-security-userprofile/training/src/main/scala/org/apache/eagle/security/userprofile/job/AuditLogTrainingSparkJob.scala
由文件到矩阵的转换
    val tmp = _sc.textFile(input)
      .map(AuditLogTransformer(_period).transform)
      .filter(e => e.isDefined)
      .map(e => {((e.get.user,e.get.periodWindowSeconds,e.get.cmd),1.toDouble) }) // [(user,period,cmd),count]

    val _aggRDD = tmp
      .reduceByKey(_ + _)                                           // [(user,period,cmd),totalCount]
      .map(kv => {((kv._1._1, kv._1._2), (kv._1._3, kv._2))})       // [(user,period),(cmd,totalCount)]
      .groupByKey()
      .map(asUserCmdCountArray(_cmdTypes))                          // [(user,(period,array))]
      .sortBy(asUserPeriod, ascending = true)
      .groupByKey()
      .map(asMatrix)

/home/sxis/workspace/incubator-eagle/eagle-security/eagle-security-userprofile/common/src/main/scala/org/apache/eagle/security/userprofile/model/AuditlogParser.scala
从hdfs日志提取信息
public HDFSAuditLogObject parse(String log) throws Exception{
		int index0 = log.indexOf(" ");
		index0 = log.indexOf(" ",index0+1);
		String data = log.substring(0, index0).trim();
		int index1 = log.indexOf("allowed="); int len1 = 8;
		int index2 = log.indexOf("ugi="); int len2 = 4;
		int index3 = log.indexOf("ip=/"); int len3 = 4;
		int index4 = log.indexOf("cmd="); int len4 = 4;
		int index5 = log.indexOf("src="); int len5= 4;
		int index6 = log.indexOf("dst="); int len6 = 4;
		int index7 = log.indexOf("perm=");

		String allowed = log.substring(index1 + len1, index2).trim();
		String ugi = log.substring(index2 + len2, index3).trim();
		String ip = log.substring(index3 + len3, index4).trim();
		String cmd = log.substring(index4 + len4, index5).trim();
		String src = log.substring(index5 + len5, index6).trim();
		String dst = log.substring(index6 + len6, index7).trim();

		HDFSAuditLogObject entity = new HDFSAuditLogObject();
		String user = LogParseUtil.parseUserFromUGI(ugi);
		if (src != null && src.equals("null")) {
			src = null;
		}

		if (dst != null && dst.equals("null")) {
			dst = null;
		}
		entity.user = user;
		entity.cmd = cmd;
		entity.src = src;
		entity.dst = dst;
		entity.host = ip;
		entity.allowed = Boolean.valueOf(allowed);
		entity.timestamp = DateTimeUtil.humanDateToMilliseconds(data);
		return entity;
	}

public class HDFSAuditLogObject {
    public long timestamp;
    public String host;
    public Boolean allowed;
    public String user;
    public String cmd;
    public String src;
    public String dst;
}
	


eigen用户画像算法
（基于与现有数据的距离，设个现有数据是所有数据的压缩版本，现有数据间有一个最大距离和最小距离，在之间的应该是异常的）

eigen，特征值，这个特征值是用svd分解数据矩阵得到的。
（可以去看通过svd进行数据降维的协同推荐算法，把用户的一系列动作看作是一件商品，动作的次数视为商品的打分，新来了一条动作（商品），我们推不推荐给该用户？）

生成模型的关键函数
            computeCovarianceAndSVD(normalizedInputMatrix, lowVariantColumnCount);//计算协方差和奇异值分解
            computeDimensionWithMaxVariance();
            computePrincipalComponents();
            maximumL2Norm = new ArrayRealVector(principalComponents.length);
            minimumL2Norm = new ArrayRealVector(principalComponents.length);
                        for (int i = 0; i < principalComponents.length; i++) {
                RealMatrix trainingDataTranspose = computeMaxDistanceOnPCs(i);
            }

            UserProfileEigenModel userprofileEigenModel = new UserProfileEigenModel(
		  System.currentTimeMillis(),site,user, uMatrix, diagonalMatrix, 
		  dimension, minVector, maxVector, principalComponents, 
		  maximumL2Norm, minimumL2Norm, statistics);
		  
1，计算协方差和svd
svd从 Data矩阵=V矩阵*对角矩阵*U矩阵
2，通过最大的方差计算出纬度
去对角阵能量的99%
            sumEach += diagonalMatrix.getEntry(i, i);
            if((sumEach/sumTotal) >= MAINTENED_VARIANCE){
                dimension = i;
3，计算主要组件（缩写为pc）
U矩阵*对角矩阵=组件

4，计算组件间的距离
得出最大值maximumL2Norm，最小值minimumL2Norm
得出距离最大的两个向量minVector，maxVector

        for(int i = 0; i < trainingDataTranspose.getRowDimension(); i++){
            RealVector iRowVector = new ArrayRealVector(trainingDataTranspose.getRow(i));
            RealVector transposePC1Vect = transposePC1.getRowVector(0);
            double distance = iRowVector.getDistance(transposePC1Vect);
            if(distance > maxDistance){
                maxDistance = distance;
                p1 = iRowVector;
                p2 = transposePC1Vect;
            }
            if(distance < minDistance)
                minDistance = distance;
            //}
        }
        maximumL2Norm.setEntry(index, maxDistance);
        minimumL2Norm.setEntry(index, minDistance);
		
		

5，模型文件（java序列化文件）
site,
user, 
uMatrix, 
diagonalMatrix, 
dimension,
minVector, 
maxVector, 
principalComponents, 
maximumL2Norm, 
minimumL2Norm, 
statistics //同kde

--------------------------
使用模型
1，如果输入数据，大于模型均值，直接设为匿名操作
2，计算输入的每个动作与模型中关键组件间的距离，只要存在大于maximumL2Norm的，设为匿名操作。
